services:
  backend:
    build:
      context: .
      dockerfile: dockerfile-backend.yml
    container_name: kjoa-backend
    restart: always
    command: >
      sh -c "pip install -r requirements.txt &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - ./media:/app/media
      - ./backend-static:/app/backend-static
    ports:
      - "8000:8000"
    environment:
      - CONDA_DEFAULT_ENV=LOCAL
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    depends_on:
      - postgres
      - redis

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: kjoa-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    command: yarn start
    depends_on:
      - backend

  postgres:
    build:
      context: ./docker-config/postgresql
      dockerfile: Dockerfile
    container_name: kjoa-postgres
    restart: always
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-init-scripts:/docker-entrypoint-initdb.d:ro
      - ./docker-init-scripts/backup.sql:/docker-entrypoint-initdb.d/backup.sql:ro
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    command: postgres -c shared_buffers=1GB -c max_connections=200
    shm_size: '2gb'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
  
  redis:
    image: redis:7-alpine
    container_name: kjoa-redis
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis-data:
  node_modules: 