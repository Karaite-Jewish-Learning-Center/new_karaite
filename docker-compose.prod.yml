services:
  postgres:
    image: postgres:17
    container_name: postgres-prod
    restart: always
    env_file:
      - .env
    volumes:
      - ./var-17:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: .
      dockerfile: newkaraites/Dockerfile
    command: >
      bash -c "python manage.py collectstatic --noinput && python manage.py migrate && gunicorn newkaraites.wsgi:application --bind 0.0.0.0:8000"
    restart: always
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - DEBUG=0
      - DJANGO_ALLOWED_HOSTS=${DOMAIN}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-api.rule=Host(`kjlc.karaites.org`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-admin.rule=Host(`kjlc.karaites.org`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.backend-static.rule=Host(`kjlc.karaites.org`) && PathPrefix(`/static`)"
      - "traefik.http.routers.backend-media.rule=Host(`kjlc.karaites.org`) && PathPrefix(`/media`)"
      - "traefik.http.routers.backend-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend-admin.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend-static.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend-media.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend-service.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.backend-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.backend-headers.headers.customrequestheaders.X-Forwarded-Host=kjlc.karaites.org"
      - "traefik.http.routers.backend-api.middlewares=backend-headers"
      - "traefik.http.routers.backend-admin.middlewares=backend-headers"
      - "traefik.http.routers.backend-static.middlewares=backend-headers"
      - "traefik.http.routers.backend-media.middlewares=backend-headers"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - ./frontend/build:/var/www
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`kjlc.karaites.org`)"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - backend

  traefik:
    image: traefik:v2.10
    container_name: traefik-prod
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=your@email.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt/acme.json:/acme.json
    env_file:
      - .env
    depends_on:
      - backend
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:
  acme_data:

networks:
  web:
    driver: bridge 