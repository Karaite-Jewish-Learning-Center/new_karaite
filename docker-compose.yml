services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=sandro.fernandes@softrent.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/ping"]
      interval: 10s
      timeout: 2s
      retries: 3

  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    env_file:
      - .env
    volumes:
      - ./var-17:/var/lib/postgresql/data/pgdata
      - ./docker-config/postgresql/pg_hba.conf:/var/lib/postgresql/data/pgdata/pg_hba.conf
      - ./docker-config/postgresql/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata

    ports:
      - "5432:5432"
    expose:
      - 5432


  backend:
    build:
      context: .
      dockerfile: dockerfile-backend.yml
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: >
      bash -c "
        python manage.py collectstatic --noinput --clear &&
        python manage.py migrate &&
        gunicorn newkaraites.wsgi:application --bind 0.0.0.0:8000
      "
    restart: always
    volumes:
      - ./backend-static:/app/backend-static
      - ./media:/app/media
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - DEBUG=0
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,dev.karaites.org
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - CONDA_DEFAULT_ENV=${CONDA_DEFAULT_ENV}
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`dev.karaites.org`) && PathPrefix(`/api`, `/admin`)"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`dev.karaites.org`)"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
    expose:
      - "80"
    volumes:
      - ./docker-config/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./backend-static:/app/backend-static:ro
      - ./media:/app/media:ro
      - ./frontend/build/:/app/build:ro
    env_file:
      - .env
    depends_on:
      - postgres
      - backend
    restart: always

  # locust:
  #   image: locustio/locust
  #   ports:
  #     - "8089:8089"
  #   volumes:
  #     - ./locustfile.py:/mnt/locust/locustfile.py
  #   command: -f /mnt/locust/locustfile.py --host=https://dev.karaites.org
  #   depends_on:
  #     - backend
  #     - nginx-proxy

volumes:
  vhost:
  html:

networks:
  default:
    name: nginx1_network

