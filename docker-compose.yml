services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    env_file:
      - .env
    volumes:
      - ./var-17:/var/lib/postgresql/data/pgdata
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker-config/postgresql/pg_hba.conf:/var/lib/postgresql/data/pgdata/pg_hba.conf
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata

    ports:
      - "5432:5432"
    expose:
      - 5432


  backend:
    build:
      context: .
      dockerfile: newkaraites/Dockerfile
    command: >
      bash -c "python manage.py collectstatic --noinput && python manage.py migrate && gunicorn newkaraites.wsgi:application --bind 0.0.0.0:8000"
    restart: always
    volumes:
      - ./static:/app/static
      - ./media:/app/media
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - CONDA_DEFAULT_ENV=${CONDA_DEFAULT_ENV}
    depends_on:
      - postgres

#  frontend:
#    build:
#      context: ./frontend
#      dockerfile: DockerFile.dev
#    volumes:
#      - ./frontend:/app
#      - ./frontend/build/static:/app/static
#      - /app/node_modules
#      - ./docker-config/certs:/app/certs
#    ports:
#      - "3000:3000"
#    environment:
#      - WATCHPACK_POLLING=true  # Enables file watching in Docker
#      - HOST=0.0.0.0 # Allow the dev server to bind to containers
#      - REACT_APP_API_URL=https://kjlc.karaites.org
#    profiles:
#      - development
#    depends_on:
#      - postgres


  # Development-only services
  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker-config/nginx/nginx_development.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static:ro
      - ./media:/app/media:ro
      - ./frontend/build:/etc/nginx/html
      - ./docker-config/certs:/etc/nginx/certs:ro
    env_file:
      - .env
    depends_on:
      - postgres
      - backend
    restart: always

  # Production-only services
  nginx-proxy-prod:
    image: nginxproxy/nginx-proxy
    profiles:
      - production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker-config/nginx/nginx_production.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static:ro
      - ./media:/app/media:ro
      - ./frontend/build:/app/frontend/build:ro
      - certs:/etc/nginx/certs:ro
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    env_file:
      - .env
    depends_on:
      - postgres
      - backend
    restart: always


  letsencrypt:
    image: nginxproxy/acme-companion
    profiles:
      - production
    volumes:
      - certs:/etc/nginx/certs:rw
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - acme:/etc/acme.sh
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
    depends_on:
      - nginx-proxy-prod

volumes:
  certs:
  vhost:
  html:
  acme:

